package me.maskat.ArenaManager.ArenaPlugin;

import org.bukkit.entity.Player;

import me.maskat.ArenaManager.ArenaManager.Manager;
import me.maskat.ArenaManager.Models.ModelArena;
import me.maskat.ArenaManager.Models.ModelArenaPlayer;
import mkproject.maskat.Papi.Papi;
import mkproject.maskat.Papi.Utils.Message;

public class ArpPlayer {
	private Player player;
	private ModelArenaPlayer modelArenaPlayer;
	private ModelArena modelArena;
	private ArpTeam arpTeam;
	private boolean insideArena;
	private boolean quitedServer;
//	private boolean allowTeleport;
	
	public ArpPlayer(ModelArenaPlayer modelArenaPlayer, ArpTeam arpTeam, ModelArena modelArena) {
		this.player = modelArenaPlayer.getPlayer();
		this.modelArenaPlayer = modelArenaPlayer;
		this.modelArena = modelArena;
		this.arpTeam = arpTeam;
		this.insideArena = true;
		this.quitedServer = false;
//		this.allowTeleport = true;
	}
	
	public Player getPlayer() {
		return this.player;
	}
	
	public boolean isQuitedServer() {
		return this.quitedServer;
	}
	public boolean setQuitedServer(boolean quitedServer) {
		return this.quitedServer;
	}
	
	public ArpArena getArena() {
		return this.modelArena.getArenaPluginInstanceArpArena();
	}
	
	public ArpTeam getTeam() {
		return this.arpTeam;
	}
	
	public boolean isOnline() {
		return this.player.isOnline();
	}
	
	public boolean isInsideArena() {
		return this.insideArena;
	}
	
	public boolean isFreeze() {
		return this.modelArenaPlayer.isFreeze();
	}
	public void setFreeze(boolean freeze) {
		this.modelArenaPlayer.setFreeze(freeze);
	}

	public void leaveArena() {
		if(insideArena == false)
			return;
		
		this.modelArenaPlayer.unsetRegisteredArena();
		this.insideArena = false;
		
		PlayerLeaveArenaEvent event = new PlayerLeaveArenaEvent(player, modelArena);
		
		modelArena.getArenaPluginInstance().onPlayerLeaveArena(event);
		
		if(this.player.isDead())
			this.modelArenaPlayer.doLeaveRespawn(event.getTeleportLocation());
		if(Papi.Model.getPlayer(player).getSurvivalLastLocation() != null)
		{
			player.teleport();
			return;
		}
		player.setGameMode(event.getNewGameMode());
		player.setFireTicks(0);
	}

	public boolean isGodmode() {
		return this.modelArenaPlayer.isGodmode();
	}
	public void setGodmode(boolean godmode) {
		this.modelArenaPlayer.setGodmode(godmode);
	}
	
	public void doWinnerGame() {
		Message.sendTitle(player, null, "&a--- ZWYCIÄ˜STWO ---");
		Manager.doEndGame(modelArena, arpTeam, this);
	}

	public void setAllowTeleport(boolean allowTeleport) {
		this.modelArenaPlayer.setAllowTeleport(allowTeleport);
	}
	public boolean isAllowTeleport() {
		return this.modelArenaPlayer.isAllowTeleport();
	}
}
