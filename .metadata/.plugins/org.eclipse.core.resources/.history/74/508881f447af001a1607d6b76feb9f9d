package me.maskat.ArenaPVP;

import java.util.Collection;

import org.bukkit.Sound;
import org.bukkit.entity.Player;

import me.maskat.ArenaManager.ArenaPlugin.AbortArenaGameEvent;
import me.maskat.ArenaManager.ArenaPlugin.ArenaInstance;
import me.maskat.ArenaManager.ArenaPlugin.ArenaPluginManager;
import me.maskat.ArenaManager.ArenaPlugin.ArpTeam;
import me.maskat.ArenaManager.ArenaPlugin.EndArenaGameEvent;
import me.maskat.ArenaManager.ArenaPlugin.PlayerDamageInArenaEvent;
import me.maskat.ArenaManager.ArenaPlugin.PlayerDeathInArenaEvent;
import me.maskat.ArenaManager.ArenaPlugin.PlayerLeaveArenaEvent;
import me.maskat.ArenaManager.ArenaPlugin.PlayerRespawnInArenaEvent;
import me.maskat.ArenaManager.ArenaPlugin.PrepareArenaAsyncEvent;
import me.maskat.ArenaManager.ArenaPlugin.PreparePlayersToArenaEvent;
import me.maskat.ArenaManager.ArenaPlugin.StartArenaGameEvent;

public class PvP_ArenaInstance implements ArenaInstance {

	@Override
	public void onPrepareArenaAsync(PrepareArenaAsyncEvent event) {
	}

	@Override
	public void onPreparePlayersToArenaEvent(PreparePlayersToArenaEvent event) {
		ArenaPluginManager.doStartGame(this, 0);
	}

	@Override
	public void onStartArenaGame(StartArenaGameEvent event) {
		for(Player player : event.getArena().getWorld().getPlayers()) {
			event.getArena().getPlayer(player).playSound(Sound.ENTITY_BLAZE_HURT);
		}
	}

	@Override
	public void onEndArenaGame(EndArenaGameEvent event) {
	}

	@Override
	public void onAbortArenaGameEvent(AbortArenaGameEvent event) {
	}

	@Override
	public void onPlayerDeathInArena(PlayerDeathInArenaEvent event) {
		Plugin.getPlugin().getLogger().warning("Player '"+event.getPlayer().getPlayer().getName()+"' arena: PlayerDeathInArenaEvent");
		event.getDrops().clear();
		event.setDroppedExp(0);
		
		event.playerLeaveArena();
	}

	@Override
	public void onPlayerRespawnInArena(PlayerRespawnInArenaEvent event) {
		Plugin.getPlugin().getLogger().warning("Player '"+event.getPlayer().getPlayer().getName()+"' arena: PlayerRespawnInArenaEvent");
	}

	@Override
	public void onPlayerDamageInArena(PlayerDamageInArenaEvent event) {
	}

	@Override
	public void onPlayerLeaveArena(PlayerLeaveArenaEvent event) {
		event.getPlayer().getPlayer().getInventory().clear();
		event.getPlayer().getPlayer().updateInventory();
		
		if(!event.getArena().isGameEnded()) {
			Collection<ArpTeam> teamsInsideArena = event.getArena().getTeamsInsideArena();
			
			if(teamsInsideArena.size() == 1)
				teamsInsideArena.iterator().next().doWinnerGame();
		}
	}

}
